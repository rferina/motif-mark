

File "/home/rfer22/bioinfo/Bi625/motif/motif-mark/motif-mark-oop.py", line 107, in identify
    with open(self, 'r') as fa:
TypeError: expected str, bytes or os.PathLike object, not Gene

changed to with open(self.oneline_fa, 'r') as fa:
got this error
OSError: [Errno 9] Bad file descriptor

could be closing a file that's not open, or reading it in the wrong mode.

Tried making gene_start, gene_stop, and gene_name variables rather than self.variables.
File "/home/rfer22/bioinfo/Bi625/motif/motif-mark/motif-mark-oop.py", line 256, in <module>
    mygene.draw_gene()
  File "/home/rfer22/bioinfo/Bi625/motif/motif-mark/motif-mark-oop.py", line 127, in draw_gene
    context.move_to(gene_start, 75)        #(x,y)
NameError: name 'gene_start' is not defined

trying combining the identify and draw functions.



Tried this, still getting error 9, testing_file = open(oneline_fa, 'r')

Realized bioinfo.oneline function is outputing the file as fa_one_line.fa, so tried this:
testing_file = open('fa_one_line.fa', 'r')
line_count = 0
for line in testing_file:
        line_count +=1
        line = line.strip('\n')
        # define gene name as header line
        if line[0] == '>':
            print('header')
        # define start and stop of gene from sequence line
        elif line[0] != '>':
            print('seq')

As expected, got this output
one_line complete
header
seq
header
seq
header
seq
oneline opened

changed mygene = Gene(oneline_fa) to mygene = Gene('fa_one_line.fa')
and it ran! 

printed out seq line lengths for test file:
one_line complete
gene1
seq
37
gene2
seq
32
gene3
seq
34
oneline opened

Those are short for drawing on pycairo, so made them longer:
one_line complete
gene1
seq
79
gene2
seq
68
gene3
seq
85
oneline opened

By switching gene_start, gene_stop, and gene_name to be in def init of Gene class, and using with open and defining the stop and start
outside of a glass, made one Gene object per line of test fasta, and the output png shows the gene lines/names on top of each other.
Need to make the new genes draw below each other.
# define gene name as header line
        if line[0] == '>':
            gene_n = line
            gene_n = gene_n.split('>')[1]
        # define start and stop of gene from sequence line
        elif line[0] != '>':
            gene_beg = 20 # does this make sense with zero indexing?
            gene_end = len(line) + gene_beg

            gene_1 = Gene(testing_file, gene_beg, gene_end, gene_n )
            print('made obj')
            gene_1.draw_gene()
            print('drew')

output:
one_line complete
made obj
drew
made obj
drew
made obj
drew

able to identify exon start and stop using finditer:
one_line complete
made obj
drew
149 155
made obj
drew
40 46
made obj
drew
54 62

But drawing the exons puts them all on the first gene. Also need to add 100 to the positions for drawing in line with the genes.

I'm assuming the fasta files will only contain the cassette exon, and no other exons.
Tried using gene number hack to draw the exons with the associated genes.
Gene.gene_number gave this error
AttributeError: type object 'Gene' has no attribute 'gene_number'

But I did gene_1 = Gene() in the main, and changing it to gene_1.gene_number in the exon class worked!

Added gene 4 to test file to try ambiguous motifs.
